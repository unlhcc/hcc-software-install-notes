# https://www.cp2k.org/static/regtest/trunk/Linux-x86-64-intel-regtest/popt/regtest-0

# Tested with: Intel(R) Fortran Intel(R) 64 Compiler for applications running on Intel(R) 64, Version 18.0.5.274 Build 20180823
#              Intel(R) Fortran Intel(R) 64 Compiler for applications running on Intel(R) 64, Version 19.0.3.199 Build 20190206
#              Intel(R) Fortran Intel(R) 64 Compiler for applications running on Intel(R) 64, Version 19.0.4.243 Build 20190416
#              Intel MPI, MKL, Libint 2.6.0, Libxc 4.3.4, libxsmm 1.14, ELPA 2019.05.001, PLUMED 2.5.2, SPGLIB 1.12.2
# Author: Matthias Krack (matthias.krack@psi.ch, PSI, December 2019)

CC          = mpicc
CPP         =
FC          = mpif90
LD          = mpif90
AR          = xiar -r
CPPFLAGS    =

#include      $(MPI_PATH)/plumed/2.5.2/lib/plumed/src/lib/Plumed.inc.static

#ELPA_VER    = 2019.05.001
#ELPA_INC    = $(MPI_PATH)/elpa/$(ELPA_VER)/include/elpa-$(ELPA_VER)
#ELPA_LIB    = $(MPI_PATH)/elpa/$(ELPA_VER)/lib

#LIBINT_INC  = $(INTEL_PATH)/libint/2.6.0-lmax-4/include
#LIBINT_LIB  = $(INTEL_PATH)/libint/2.6.0-lmax-4/lib

#LIBXC_INC   = $(INTEL_PATH)/libxc/4.3.4/include
#LIBXC_LIB   = $(INTEL_PATH)/libxc/4.3.4/lib

#LIBXSMM_INC = $(INTEL_PATH)/libxsmm/1.14/include
#LIBXSMM_LIB = $(INTEL_PATH)/libxsmm/1.14/lib

#SPGLIB_INC  = $(INTEL_PATH)/spglib/1.12.2/include
#SPGLIB_LIB  = $(INTEL_PATH)/spglib/1.12.2/lib

CFLAGS      = -O2 -g -traceback -xHost

DFLAGS      = -D__FFTW3 -D__LIBINT
DFLAGS     += -D__LIBINT_MAX_AM=7 -D__LIBDERIV_MAX_AM1=6
#DFLAGS     += -D__ELPA -D__LIBXC -D__LIBXSMM
DFLAGS     += -D__MKL -D__MPI_VERSION=3
#DFLAGS     += -D__PLUMED2 -D__SPGLIB
DFLAGS     += -D__parallel -D__SCALAPACK
DFLAGS     += -D__CHECK_DIAG

FCFLAGS     = $(CFLAGS) $(DFLAGS)
FCFLAGS    += -fpp -fp-model precise -free -funroll-loops
FCFLAGS    += -I${MKLROOT}/include -I${MKLROOT}/include/fftw
#FCFLAGS    += -I$(ELPA_INC)/elpa -I$(ELPA_INC)/modules
FCFLAGS    += -I$(LIBINT_INC)
#FCFLAGS    += -I$(LIBXC_INC) -I$(LIBXSMM_INC)

LDFLAGS     = $(FCFLAGS) -static-intel
LDFLAGS_C   = -nofor_main

MKL_LIB     = ${MKLROOT}/lib/intel64

LIBS        = 
#LIBS        = $(LIBPATH)/libz.a
#LIBS       += $(PLUMED_DEPENDENCIES) $(GSL_LIBRARY_DIR)/libgsl.a $(GSL_LIBRARY_DIR)/libgslcblas.a
#LIBS       += $(ELPA_LIB)/libelpa.a
#LIBS       += $(LIBXC_LIB)/libxcf03.a $(LIBXC_LIB)/libxc.a
#LIBS       += $(LIBINT_LIB)/libint2.a
LIBS       += $(LIBINT_LIB)/libderiv.a $(LIBINT_LIB)/libint.a -lstdc++
#LIBS       += $(LIBXSMM_LIB)/libxsmmf.a $(LIBXSMM_LIB)/libxsmm.a
#LIBS       += $(SPGLIB_LIB)/libsymspg.a
# MKL BEGIN
LIBS       += ${MKL_LIB}/libmkl_scalapack_lp64.a
LIBS       += -Wl,--start-group
LIBS       += ${MKL_LIB}/libmkl_intel_lp64.a
LIBS       += ${MKL_LIB}/libmkl_sequential.a
LIBS       += ${MKL_LIB}/libmkl_core.a
LIBS       += ${MKL_LIB}/libmkl_blacs_openmpi_lp64.a
LIBS       += -Wl,--end-group
LIBS       += -lpthread -lm -ldl
# MKL END
#LIBS       += $(GCC_LIBRARY_DIR)/libstdc++.a

# Required due to memory leak that occurs if high optimisations are used
mp2_optimize_ri_basis.o: mp2_optimize_ri_basis.F
	$(FC) -c $(subst O2,O0,$(FCFLAGS)) $<
